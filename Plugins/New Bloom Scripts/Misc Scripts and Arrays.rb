$BERRYMARKET = [:CHERIBERRY,:CHESTOBERRY,:PECHABERRY,:RAWSTBERRY,:ASPEARBERRY,:LEPPABERRY,:ORANBERRY,:PERSIMBERRY,:LUMBERRY,:SITRUSBERRY,:FIGYBERRY,:WIKIBERRY,:MAGOBERRY,:AGUAVBERRY,:IAPAPABERRY,:POMEGBERRY,:KELPSYBERRY,:QUALOTBERRY,:HONDEWBERRY,:GREPABERRY,:TAMATOBERRY]
$GENERALA = [:POKEBALL,:POTION,:SUPERPOTION,:ANTIDOTE,:PARALYZEHEAL,:AWAKENING,:BURNHEAL,:ICEHEAL,:REPEL]
$GENERALB = [:POKEBALL,:GREATBALL,:POTION,:SUPERPOTION,:ANTIDOTE,:PARALYZEHEAL,:AWAKENING,:BURNHEAL,:ICEHEAL,:FULLHEAL,:REPEL,:SUPERREPEL,:REVIVE,:ETHER]
$GENERALC = [:POKEBALL,:GREATBALL,:ULTRABALL,:POTION,:SUPERPOTION,:HYPERPOTION,:ANTIDOTE,:PARALYZEHEAL,:AWAKENING,:BURNHEAL,:ICEHEAL,:FULLHEAL,:REPEL,:SUPERREPEL,:MAXREPEL,:REVIVE,:ETHER]
$GENERALD = [:POKEBALL,:GREATBALL,:ULTRABALL,:POTION,:SUPERPOTION,:HYPERPOTION,:MAXPOTION,:FULLRESTORE,:ANTIDOTE,:PARALYZEHEAL,:AWAKENING,:BURNHEAL,:ICEHEAL,:FULLHEAL,:REPEL,:SUPERREPEL,:MAXREPEL,:REVIVE,:ETHER,:ELIXIR]
$POKEBALLGUY = [:NETBALL,:DIVEBALL,:NESTBALL,:REPEATBALL,:TIMERBALL,:LUXURYBALL,:DUSKBALL,:HEALBALL,:QUICKBALL]
$TMSELLER1 = [:TM01,:TM02,:TM03,:TM04,:TM05,:TM06,:TM07,:TM08,:TM09,:TM10,:TM11,:TM12,:TM13,:TM14,:TM15,:TM16,:TM17,:TM18,:TM19,:TM20,:TM21,:TM22,:TM23,:TM24,:TM25]
$TMSELLER2 = [:TM26,:TM27,:TM28,:TM29,:TM30,:TM31,:TM32,:TM33,:TM34,:TM35,:TM36,:TM37,:TM38,:TM39,:TM40,:TM41,:TM42,:TM43,:TM44,:TM45,:TM46,:TM47,:TM48,:TM49,:TM50]
$TMSELLER3 = [:TM51,:TM52,:TM53,:TM54,:TM55,:TM56,:TM57,:TM58,:TM59,:TM60,:TM61,:TM62,:TM63,:TM64,:TM65,:TM66,:TM67,:TM68,:TM69,:TM70,:TM71,:TM72,:TM73,:TM74,:TM75]
$TMSELLER4 = [:TM76,:TM77,:TM78,:TM79,:TM80,:TM81,:TM82,:TM83,:TM84,:TM85,:TM86,:TM87,:TM88,:TM89,:TM90,:TM91,:TM92,:TM93,:TM94,:TM95,:TM96,:TM97,:TM98,:TM99,:TM100,:TM101]
$TMSELLER5 = [:TM102,:TM103,:TM104,:TM105,:TM106,:TM107,:TM108,:TM109,:TM110,:TM111,:TM112,:TM113,:TM114,:TM115,:TM116,:TM117,:TM118,:TM119,:TM120,:TM121,:TM122,:TM123,:TM124,:TM125,:TM126]
$TMSELLER6 = [:TM127,:TM128,:TM129,:TM130,:TM131,:TM132,:TM133,:TM134,:TM135,:TM136,:TM137,:TM138,:TM139,:TM140,:TM141,:TM142,:TM143,:TM144,:TM145,:TM146,:TM147,:TM148,:TM149,:TM150]
$STONESELLER = [:FIRESTONE,:THUNDERSTONE,:WATERSTONE,:LEAFSTONE,:MOONSTONE,:SUNSTONE,:DUSKSTONE,:DAWNSTONE,:SHINYSTONE,:ICESTONE]
$INCENSEGUY = [:LAXINCENSE,:FULLINCENSE,:LUCKINCENSE,:PUREINCENSE,:SEAINCENSE,:WAVEINCENSE,:ROSEINCENSE,:ODDINCENSE,:ROCKINCENSE]
$MISC1 = [:AIRBALLOON,:BRIGHTPOWDER,:EVIOLITE,:FLOATSTONE,:DESTINYKNOT,:ROCKYHELMET,:EJECTBUTTON,:REDCARD,:SHEDSHELL,:SMOKEBALL,:CHOICEBAND,:CHOICESPECS,:CHOICESCARF,:HEATROCK,:DAMPROCK,:SMOOTHROCK,:ICYROCK,:LIGHTCLAY]
$MISC2 = [:SACHET,:WHIPPEDDREAM,:SWEETAPPLE,:TARTAPPLE,:CHIPPEDPOT,:UPGRADE,:DUBIOUSDISC,:PROTECTOR,:ELECTIRIZER,:MAGMARIZER,:REAPERCLOTH,:PRISMSCALE,:OVALSTONE,:ASSAULTVEST,:SOOTHEBELL,:LUCKYEGG]
$MISC3 = [:LIGHTBALL,:LUCKYPUNCH,:METALPOWDER,:QUICKPOWDER,:THICKCLUB,:LEEK,:DEEPSEATOOTH,:DEEPSEASCALE,:DRAGONSCALE]
$MISC4 = [:GRIPCLAW,:BINDINGBAND,:BIGROOT,:BLACKSLUDGE,:LEFTOVERS,:SHELLBELL,:MENTALHERB,:WHITEHERB,:POWERHERB,:ABSORBBULB,:CELLBATTERY,:LIFEORB,:EXPERTBELT,:METRONOME,:MUSCLEBAND,:WISEGLASSES,:RAZORCLAW,:SCOPELENS]
$MISC5 = [:WIDELENS,:ZOOMLENS,:KINGSROCK,:RAZORFANG,:LAGGINGTAIL,:QUICKCLAW,:FOCUSBAND,:FOCUSSASH,:FLAMEORB,:TOXICORB,:STICKYBARB,:IRONBALL,:RINGTARGET,:MACHOBRACE,:POWERWEIGHT,:POWERBRACER,:POWERBELT,:POWERLENS,:POWERBAND,:POWERANKLET]
$POWERBOOSTER = [:CHARCOAL,:MYSTICWATER,:MAGNET,:MIRACLESEED,:NEVERMELTICE,:BLACKBELT,:POISONBARB,:SOFTSAND,:SHARPBEAK,:TWISTEDSPOON,:SILVERPOWDER,:HARDSTONE,:SPELLTAG,:DRAGONFANG,:BLACKGLASSES,:METALCOAT,:SILKSCARF,:PIXIEDUST]
$DRUGDEAL = [:XATTACK,:XDEFENSE,:XSPATK,:XSPDEF,:XSPEED,:XACCURACY,:DIREHIT,:GUARDSPEC,:PPUP,:PPMAX,:HPUP,:PROTEIN,:IRON,:CALCIUM,:ZINC,:CARBOS,:LONELYMINT,:ADAMANTMINT,:NAUGHTYMINT,:BRAVEMINT,:BOLDMINT,:IMPISHMINT,:LAXMINT,:RELAXEDMINT,:MODESTMINT,:MILDMINT,:RASHMINT,:QUIETMINT,:CALMMINT,:GENTLEMINT,:CAREFULMINT,:SASSYMINT,:TIMIDMINT,:HASTYMINT,:JOLLYMINT,:NAIVEMINT,:SERIOUSMINT]
$NURSEA = [:POTION,:POKEBALL]
$NURSEB = [:POTION,:POKEBALL,:GREATBALL]
$NURSEC = [:POTION,:POKEBALL,:GREATBALL,:ULTRABALL]

def pbChangeName(name=nil,outfit=0)
  pbChangePlayer(0) if $PokemonGlobal.playerID<0
  trainertype = pbGetPlayerTrainerType
  $trname = name
  if $trname==nil
    $trname = $Trainer.name=pbEnterPlayerName(_INTL("Your name?"),1,@parameters[1],$Trainer.name)
    if $trname==""
      gender = pbGetTrainerTypeGender(trainertype) 
      trname = pbSuggestTrainerName(gender)
    end
  end
  $Trainer.name = $trname
end

def pbUnownQuick
  if $Trainer.party[0].species == 201 && $Trainer.party[1].species == 201 && $Trainer.party[2].species == 201 && $Trainer.party[3].species == 201 && $Trainer.party[4].species == 201  # Checks if all Pokemon are Unown
    if $Trainer.party[0].form == 16 && $Trainer.party[1].form == 20 && $Trainer.party[2].form == 8 && $Trainer.party[3].form == 2 && $Trainer.party[4].form == 10
    # Checks if they are in the right order to spell QUICK
    return true
    end
  end
end

# Footsteps
Events.onStepTakenTransferPossible+=proc {|sender,e|
  handled=e[0]
  next if handled[0]
  event = $game_player
  thistile = $MapFactory.getRealTilePos(event.map.map_id,event.x,event.y)
  map = $MapFactory.getMap(thistile[0])
  if event==$game_player
    return if $PokemonGlobal.bicycle || $PokemonGlobal.surfing
    for i in [2, 1, 0]
      tile_id = map.data[thistile[1],thistile[2],i]
      if GameData::TerrainTag.try_get(map.terrain_tags[tile_id]).id == :Grass
        if ($PokemonSystem.runstyle == 1 && !Input.press?(Input::ACTION)) || ($PokemonSystem.runstyle == 0 && Input.press?(Input::ACTION))
          pbSEPlay("se_step_run_grass")
        else
          pbSEPlay("se_step_grass")
        end
      elsif !GameData::MapMetadata.get($game_map.map_id).outdoor_map || GameData::TerrainTag.try_get(map.terrain_tags[tile_id]).id == :Bridge || GameData::TerrainTag.try_get(map.terrain_tags[tile_id]).id == :Road
          pbSEPlay("se_step_default")
      elsif GameData::TerrainTag.try_get(map.terrain_tags[tile_id]).id == :Ice
      else
        if ($PokemonSystem.runstyle == 1 && !Input.press?(Input::ACTION)) || ($PokemonSystem.runstyle == 0 && Input.press?(Input::ACTION))
          pbSEPlay("se_step_run_dirt")
        else
          pbSEPlay("se_step_dirt")
        end
      end
    end
  end
}

def pbHasTypeMove?(type)
  check = false
  $Trainer.party.each do |pkmn|
    pkmn.moves.each do |m|
      check = true if m.type == getID(PBTypes,type)
        break if check == true
    end
  end
  if check == true
    return true
  else
    return false
  end
end